---
title: "Professional skills for data science"
subtitle: "Data structures"
format: pptx
reference-doc: template.pptx
author: Ed Harris
date: 2024-09-13
date-format: iso
center: true
---

## Objectives

- Basic data types in R

- Data with factors

- `class()` and converting variables

- Vector and Matrix fun

- Practice exercises


## Basic data types in R

- Concept of "Data Objects"

- Data you can use is in the Global Environment 

- Data Type refers to the kind of data (important for computers)

- Data Type is determined automatically in R (by the passive-aggressive Butler)

- You often will need and want to tweak data type

## Basic primitive types in R

```
a <- 1    # numeric
mode(a)
a <- "1"  # character
mode(a)
a <- '1'  # character
mode(a)
a <- TRUE # logical
mode(a)
a <-  1i # complex
mode(a)
```
## Basic data types in R

- NULL means undefined value (absence of a vector)
  + is.null() function can check it

- NA means missing value (not available)
  + is.na()

- inf means infinity e.g. 1/0 of -1/0
  + is.infinite()
- NaN means an invalid number e.g. 0/0
  + is.nan()

## Basic data types in R

```
my_list <- list(a = 1, b = 2)
my_list <- my_list$c  # Element 'c' doesn't exist, Output: NULL

na_addition  <- 5 + NA
print(na_addition)  # Output: NA


```
## Basic data types in R

There are some rules for naming data objects

- Can contain letters, numbers, some symbolic characters

- Begin with a letter, Does not contain spaces

- Some things are forbidden, `@`, `%`, `#`, etc.

- Should be human-readable, consistent, and not too long

## Basic data types in R


```
x1 <- 5  

x2 <- "It was a dark and stormy night" 

# hard to read
my_variable_9283467 <- 1 

```


## Data with factors

::: columns
::: {.column width="50%"}

Let's you want to analyse categorical data.

Sometimes this is called a "factor".
:::

::: {.column width="50%"}


![](pics/mean_mark_boxplot_ggplot2.webp)
::: 
::: 


## Data with factors

Two types of factors

- Non-ordered factors : the levels are the names of the categories
**cows** = Martha, Ruth, Edith

- Ordered factors: have a specific order
**dose** = Control < Half < Full

## class() and converting variables

```

# non-ordered factor
variety <- c("short", "short", "short",
             "early", "early", "early",
             "hybrid", "hybrid", "hybrid")
         

```

## Vector and Matrix fun

Ways of organizing data

<br>

- Vector - Homogeneous and One dimensional from 1 to i, `my_vec[i]`

- Matrix - Two dimensions rows, columns, `my_mat[i, j]`

- Array - Generalized matrix with n dimensions, `my_array[i, j, k]`

## Vector and Matrix fun

```
# Vectors

myvec1 <- c(1,2,3,4,5) 
myvec1
class(myvec1) 

myvec2 <- as.character(myvec1) 

```

## Vector and Matrix fun

```
vec1 <- 1:16 
vec1 

mat1 <- matrix(data = vec1, 
               ncol = 4, 
               byrow = FALSE) 
```

## Lists
Unlike vectors and matrices, lists can hold elements of different types. Each element in a list can be a vector, matrix, data frame, or even another list
```
# Creating a list
my_list <- list(name="John", age=25, scores=c(90, 85, 88))
print(my_list)
```
You can access elements in a list using the $ operator or double square brackets [[]].


## Practice Exercises

![](pics/Laptop_duck.webp)
